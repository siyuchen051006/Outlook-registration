import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
import os
import time
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import random
import string
from faker import Faker
from selenium.webdriver.support.ui import Select
import selenium.common.exceptions

# initializing
api_key = "CAP-7FF250A08C508C8EE6B127F5545E8A2C"  # your api key of capsolver
public_key = "B7D8911C-5CC8-A9A3-35B0-554ACEE604DA"  # publicKey of your target site
options = webdriver.ChromeOptions()
options.add_experimental_option('detach', True)
driver = webdriver.Chrome(options=options)
driver.maximize_window()

proxies = {
    'http': '23.247.130.11:2005',
    'https': '23.247.130.11:2005',
}


# "proxy": "23.247.130.11:2005"


class Fake:
    def __init__(self):
        self.fake = Faker("en_US")

    def get_name(self):
        return self.fake.name()

    def get_phone_number(self):
        return self.fake.phone_number()


def generate_random_string():
    length = random.randint(8, 15)
    first_character = random.choice(string.ascii_letters)
    remaining_characters = string.ascii_letters + string.digits
    while True:
        result = ''.join(random.choice(remaining_characters) for _ in range(length - 1))
        if any(char.isupper() for char in result):
            break
    return first_character + result


def write_text(account, password):
    f = open(r'C:\Users\admin\Desktop\register\account.txt', 'a+')
    f.write(account + "---")
    f.write(password)
    f.close()


def cap_solver():
    payload = {
        "clientKey": api_key,
        "task": {
            "type": "FunCaptchaTask",
            "websiteURL": "https://iframe.arkoselabs.com",
            "websitePublicKey": "B7D8911C-5CC8-A9A3-35B0-554ACEE604DA",
            "proxy": "43.159.28.105:19086"
        }
    }
    res = requests.post("https://api.capsolver.com/createTask", json=payload, proxies=proxies)
    resp = res.json()
    task_id = resp.get("taskId")
    if not task_id:
        print("Failed to create task:", res.text)
        return
    print(f"Got taskId: {task_id} / Getting result...")
    while True:
        time.sleep(1)  # delay
        payload = {"clientKey": api_key, "taskId": task_id}
        res = requests.post("https://api.capsolver.com/getTaskResult", json=payload, proxies=proxies)
        resp = res.json()
        status = resp.get("status")
        if status == "ready":
            return resp.get("solution", {}).get('token')
        if status == "failed" or resp.get("errorId"):
            a = "Solve failed! response:" + res.text
            return a


def wait_by_id(id_name, click, send_keys, content):
    try:
        target = WebDriverWait(driver, 30, 0.5).until(EC.presence_of_element_located((By.ID, id_name)))
        if click:
            time.sleep(1)
            target.click()
            if send_keys is True:
                time.sleep(1)
                target.send_keys(content)
    except selenium.common.exceptions.TimeoutException:
        print("无法找到ID:", id_name)


def register():
    a = Fake()
    name = a.get_name().split(" ")
    first_name, last_name = name[0], name[1]
    account = generate_random_string()
    password = generate_random_string()
    print('本次注册账号为：', account)
    print('本次注册密码为：', password)
    driver.get('https://go.microsoft.com/fwlink/p/?linkid=2125440&clcid=0x409&culture=en-us&country=us')
    wait_by_id(id_name='iSignupAction', click=True, send_keys=False, content=None)
    wait_by_id(id_name='MemberName', click=True, send_keys=True, content=account)
    wait_by_id(id_name='iSignupAction', click=True, send_keys=False, content=None)
    wait_by_id(id_name='PasswordInput', click=True, send_keys=True, content=password)
    wait_by_id(id_name='iSignupAction', click=True, send_keys=False, content=None)
    wait_by_id(id_name='LastName', click=True, send_keys=True, content=last_name)
    wait_by_id(id_name='FirstName', click=True, send_keys=True, content=first_name)
    wait_by_id(id_name='iSignupAction', click=True, send_keys=False, content=None)
    wait_by_id(id_name='BirthYear', click=True, send_keys=True, content=random.randint(1990, 2005))
    wait_by_id(id_name='BirthMonthContainer', click=True, send_keys=False, content=None)
    birth_month_container = Select(driver.find_element(By.ID, 'BirthMonth'))
    birth_month_container.select_by_index(random.randint(1, 12))
    wait_by_id(id_name='BirthDayContainer', click=True, send_keys=False, content=None)
    birth_day_container = Select(driver.find_element(By.ID, 'BirthDay'))
    birth_day_container.select_by_index(random.randint(1, 28))
    wait_by_id(id_name='iSignupAction', click=True, send_keys=False, content=None)
    WebDriverWait(driver, 100).until(EC.presence_of_element_located((By.ID, 'HipEnforcement')))
    ifram = driver.find_element(By.ID, 'enforcementFrame')
    driver.switch_to.frame(ifram)
    # wait_by_id(id_name='game-core-frame', click=False, send_keys=False, content=None)
    # 以上为注册常规步骤 以下为获取以及提交token
    print("正在向capsolver发送请求")
    token = cap_solver()
    find = token.find("Solve failed! ")
    if find != -1:
        driver.execute_script(f'''
            parent.postMessage(JSON.stringify({{
                eventId: "challenge-complete",
                payload: {{
                    sessionToken: "{token}"
                }}
            }}), "*");
        ''')
    else:
        token_2 = cap_solver()
        driver.execute_script(f'''
                    parent.postMessage(JSON.stringify({{
                        eventId: "challenge-complete",
                        payload: {{
                            sessionToken: "{token_2}"
                        }}
                    }}), "*");
                ''')
    try:
        no = WebDriverWait(driver, 100).until(EC.presence_of_element_located((By.ID, 'declineButton')))
        time.sleep(1)
        no.click()
        f = open(r'C:\Users\admin\Desktop\register\account.txt', 'a+')
        f.write(account + '---')
        f.write(password + '\r')
        print('账号：', account, '已成功注册，已写入文件')
        os.system('taskkill /f /im %s' % 'chrome.exe')
    except TimeoutError:
        print("账号：", account, "注册失败，正在启动下一次注册")
        os.system('taskkill /f /im %s' % 'chrome.exe')


register()
token = cap_solver()
print(token)
